APPLICATION_NAME="Service/ARK-Server"
SCREEN_NAME="ServiceARKServer"
EXECUTION_FILE="/ARK/Service/Server/run.sh"
EXECUTING_USER="steam"

SCREEN_KEEPER=true
MIN_ELAPSED_TIME=60
MAXCOUNT_TIME_EXCEEDED=3
RESTART_DELAY=0
RESTART_ONFAILURE_ONLY=true

NOT_RECOMMEND_FORCE_RUN=false

ENABLE_USERDEFINED_STOP=true
function userdefined_stop() { # Params: SCREEN_NAME/SCREEN_NAME_FULL
	CONFIG_FILE="/ARK/Service/Server/commandline.cfg"
	if [ -f "${CONFIG_FILE}" ]; then
		eval "`. ${CONFIG_FILE}&>/dev/null
		[ -v ARKSERVER_RCONENABLED ] && declare -p ARKSERVER_RCONENABLED 2>/dev/null
		[ -v ARKSERVER_RCONPASSWORD ] && declare -p ARKSERVER_RCONPASSWORD 2>/dev/null
		[ -v ARKSERVER_RCONPORT ] && declare -p ARKSERVER_RCONPORT 2>/dev/null`"
	fi

	if [ "${ARKSERVER_RCONENABLED}" != "True" ] && [ "${ARKSERVER_RCONENABLED}" != "true" ] && [ "${ARKSERVER_RCONENABLED}" != true ]; then
		return 1
	fi

	if [ ! -v ARKSERVER_RCONPASSWORD ] || [ ! -v ARKSERVER_RCONPORT ]; then
		return 1
	fi

	counter=1
	while [ "$counter" -le 3 ]; do
		./stoparkserver "127.0.0.1:${ARKSERVER_RCONPORT}" "${ARKSERVER_RCONPASSWORD}"
		LAST_EXIT_CODE="${?}"

		if [ "${LAST_EXIT_CODE}" -eq 0 ]; then
			break;
		fi
		counter=$(($counter+1))
	done;

	[ "${LAST_EXIT_CODE}" -eq 0 ]
}
function custom_printlog() { # Params: LEVEL ID MESSAGE
	/ARK/log.sh append "[${1}] ${3}" &>/dev/null
	return ${?}
}
